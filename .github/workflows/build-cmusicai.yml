name: Build and Release CmusicAI Wallets

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build and release'
        required: true
        default: '1.0.0'

env:
  SCRIPTS: ${{ github.workspace }}/.github/scripts

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        OS: [ 'windows', 'linux', 'linux-disable-wallet', 'arm32v7', 'arm32v7-disable-wallet', 'aarch64', 'aarch64-disable-wallet' ]
    steps:
      - name: Checkout the Code
        uses: actions/checkout@v2

      - name: Set execute permissions on scripts
        run: sudo chmod +x ${SCRIPTS}/*.sh

      - name: Install Build Tools
        run: sudo ${SCRIPTS}/00-install-deps.sh ${{ matrix.OS }}

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/depends/built
            ${{ github.workspace }}/depends/sources
            ${{ github.workspace }}/depends/work
          key: ${{ matrix.OS }}

      - name: Build dependencies
        run: ${SCRIPTS}/02-copy-build-dependencies.sh ${{ matrix.OS }} ${{ github.workspace }} ${{ github.base_ref }} ${{ github.ref }}

      - name: Add Dependencies to the System PATH
        run: ${SCRIPTS}/03-export-path.sh ${{ matrix.OS }} ${{ github.workspace }}

      - name: Build Config
        run: cd ${{ github.workspace }} && ./autogen.sh

      - name: Configure Build
        run: ${SCRIPTS}/04-configure-build.sh ${{ matrix.OS }} ${{ github.workspace }}

      - name: Build CmusicAI
        run: make -j2

      - name: Check Binary Security
        run: ${SCRIPTS}/05-binary-checks.sh ${{ matrix.OS }} ${{ github.workspace }}

      - name: Package Up the Build
        run: |
          VERSION=${{ github.event.inputs.version }}
          OS=${{ matrix.OS }}
          ${SCRIPTS}/06-package.sh $OS ${{ github.workspace }} $VERSION

      - name: Upload Artifacts to Job
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.OS }}
          path: ${{ github.workspace }}/release

  create-release:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: actions/github-script@v4
        with:
          script: |
            const { data: release } = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.payload.inputs.version,
              name: context.payload.inputs.version,
              draft: false,
              prerelease: false
            });
            core.setOutput("upload_url", release.upload_url);

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.OS }}
          path: ./release

      - name: Upload Release Assets
        run: |
          for file in ./release/*; do
            echo "Uploading $file"
            gh release upload ${{ steps.create_release.outputs.upload_url }} "$file"
          done

      - name: Upload Release Assets
        run: |
          for file in ./release/*; do
            asset_name=$(basename "$file")
            mime_type=$(file --mime-type -b "$file")
            echo "Uploading $asset_name with MIME type $mime_type"
            curl \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: $mime_type" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$asset_name"
          done
