name: Build CmusicAI Wallets

on:
  push:
    branches:
      - release*
  pull_request:
    branches:
      - main
      - develop
      - release*
  release:
    types:
      - created

env:
  SCRIPTS: ${{ github.workspace }}/.github/scripts

jobs:
  check-jobs:
    runs-on: ubuntu-20.04
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: 'never'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '[
                          "binaries/**",
                          "community/**",
                          "contrib/**",
                          "doc/**",
                          "roadmap/**",
                          "share/**",
                          "static-builds/**",
                          "whitepaper/**",
                          "**/*.md"
                          ]'
          do_not_skip: '["workflow_dispatch", "schedule"]'

  build:
    needs: check-jobs
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        OS: [ 'windows', 'linux', 'linux-disable-wallet', 'arm32v7', 'arm32v7-disable-wallet', 'aarch64', 'aarch64-disable-wallet' ]
    steps:
      - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
        name: Checkout the Code
        uses: actions/checkout@v1

      - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
        name: Set execute permissions on scripts
        run: sudo chmod +x ${SCRIPTS}/*.sh

      - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
        name: Install Build Tools
        run: sudo ${SCRIPTS}/00-install-deps.sh ${{ matrix.OS }}

      - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
        name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/depends/built
            ${{ github.workspace }}/depends/sources
            ${{ github.workspace }}/depends/work
          key: ${{ matrix.OS }}

      - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
        name: Build dependencies
        run: ${SCRIPTS}/02-copy-build-dependencies.sh ${{ matrix.OS }} ${{ github.workspace }} ${{ github.base_ref }} ${{ github.ref }}

      - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
        name: Add Dependencies to the System PATH
        run: ${SCRIPTS}/03-export-path.sh ${{ matrix.OS }} ${{ github.workspace }}

      - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
        name: Build Config
        run: cd ${{ github.workspace }} && ./autogen.sh

      - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
        name: Configure Build
        run: ${SCRIPTS}/04-configure-build.sh ${{ matrix.OS }} ${{ github.workspace }}

      - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
        name: Build CmusicAI
        run: make -j2

      - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
        name: Check Binary Security
        run: ${SCRIPTS}/05-binary-checks.sh ${{ matrix.OS }} ${{ github.workspace }}

      - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
        name: Package Up the Build
        run: |
          VERSION=${{ github.event.release.tag_name }}
          OS=${{ matrix.OS }}
          ${SCRIPTS}/06-package.sh $OS ${{ github.workspace }} $VERSION

      - if: ${{ needs.check-jobs.outputs.should_skip != 'true' }}
        name: Upload Artifacts to Job
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.OS }}
          path: ${{ github.workspace }}/release

  attach-release:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.OS }}
          path: ./release

      - name: Get Release ID
        id: get_release_id
        uses: actions/github-script@v4
        with:
          script: |
            const { data: release } = await github.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.payload.release.tag_name
            });
            return { id: release.data.id, upload_url: release.data.upload_url };

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release_id.outputs.upload_url }}
          asset_path: ./release/${{ matrix.OS }}-output-file.zip
          asset_name: ${{ matrix.OS }}-output-file.zip
          asset_content_type: application/zip
